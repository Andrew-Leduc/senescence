xd$quantitation[(xd$quantitation)==Inf]<-NA
xd$quantitation[(xd$quantitation)==0]<-NA
xd <- xd %>% dplyr::mutate_if(is.factor, as.character)
xd1 <- xd %>%
dplyr::group_by(id) %>%
dplyr::mutate(norm_q1 = quantitation / median(quantitation, na.rm=T))
xd2 <- xd1 %>%
dplyr::group_by(sequence, Raw.file) %>%
dplyr::mutate(norm_q = quantitation / median(norm_q1, na.rm=T))
xd3<- xd2 %>%
dplyr::filter(celltype%in%c(your_labels))
xd4<- xd3 %>%
dplyr::group_by(protein, id) %>%
mutate(cvq = cv(norm_q))
xd5<- xd4 %>%
dplyr::group_by(protein, id) %>%
dplyr::mutate(cvn = cvna(norm_q))
xd6<- xd5 %>%
filter(cvn > 2)
xd7<-xd6 %>% group_by(id) %>% dplyr::mutate(cvm=median(cvq, na.rm=T))
xdf<-xd7
look <- xdf %>% filter(control == 'ctl')
look <- look %>% distinct(Raw.file,.keep_all = T)
#print("Number of unique proteins used in calculation:", length(unique(xdf$protein)))
median(xdf$cvm)
# Filter out variable wells and controls
cvPar <- 0.46
sc_kept<-unique( xdf$id[xdf$celltype!=your_control_label & xdf$cvm < cvPar])
sc0_kept<-unique( xdf$id[xdf$celltype==your_control_label & xdf$cvm > cvPar])
# Which wells to keep
keep_these<-unique( xdf$id)
sc_total<-unique( xdf$id[xdf$celltype!=your_control_label])
sc0_total<-unique( xdf$id[xdf$celltype==your_control_label])
scrate<-round(length(sc_kept) / length(sc_total),2)*100
ev.matrix.sc.f<-ev.matrix.sc[,colnames(ev.matrix.sc)%in%sc_kept]; dim(ev.matrix.sc.f)
ev.matrix.sc.f[ev.matrix.sc.f==Inf]<-NA
ev.matrix.sc.f[ev.matrix.sc.f==-Inf]<-NA
ev.matrix.sc.f[ev.matrix.sc.f==0]<-NA
xdf$control<-"sc"
xdf$control[xdf$celltype==your_control_label]<-"ctl"
my_col3<-c( "black", "purple2")
ggplot(data=xdf, aes(x=cvm,fill=control)) + geom_density(aes( alpha=0.5), adjust=4) + theme_pubr() +
scale_fill_manual(values=my_col3[c(1,2)]) +
xlab("Quantification variability") + ylab("Fraction of cells") + rremove("y.ticks") + rremove("y.text") +
font("xylab", size=30) +
font("x.text", size=20) +
coord_cartesian(xlim=c(.0,1))+
#xlim(c(-0.15, 0.35)) +
# annotate("text", x=0.27, y= 14, label=paste0(scrate,"% single cells passed"), size=8, color=my_col3[c(2)])+
# annotate("text", x=0.27, y= 12.5, label=paste0(sc0rate,"% control wells passed"), size=8, color=my_col3[c(1)])+
annotate("text", x=0.26, y= 14, label=paste0(length(sc_kept),"cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.64, y= 12, label=paste0(length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
annotate("text", x=0.63, y= 14, label=paste0(length(sc_total) -length(sc_kept)," cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.245, y= 12, label=paste0(length(sc0_total) - length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
#annotate("text", x=0.25, y= 3, label="Macrophage-like", size=6) +
rremove("legend") + geom_vline(xintercept=0.4, lty=2, size=2, color="gray50") + theme(plot.margin = margin(0, 1, 0, 0, "cm"))
# Add your cell type labels, must match those used in experimental design --> these are specified in annotation file
your_labels<-c("sc","neg")
your_control_label<-"neg"
# Organize data into a more convenient data structure:
# Create empty data frame
ev.melt<-melt(ev[0, c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest", colnames(ev)[ri.index]) ],
id.vars = c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest"))
colnames(ev.melt)<-c("Raw.file","sequence","protein","lcbatch","sortday","digest","celltype","quantitation")
# Record mapping of cell type to Channel:
ct.v<-c()
qt.v<-c()
# Create a unique ID string
unique.id.numeric<-1:length(ri.index)
unique.id<-paste0("i",unique.id.numeric)
RI_keep<-ri.index
ev <- ev %>% filter(is.na(Raw.file)==F)
# Give each sample a unique identifier
for(X in unique(ev$Raw.file)){
# Subset data by X'th experiment
ev.t<-ev[ev$Raw.file%in%X, ]
# Name the RI columns by what sample type they are: carrier, single cell, unused, etc...
colnames(ev.t)[ri.index]<-paste0(as.character(unlist(design[design$Set==X,-1])),"-", unique.id)
# Melt it! and combine with other experimental sets
ev.t.melt<-melt(ev.t[, c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest", colnames(ev.t)[RI_keep]) ],
id.vars = c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest"));
# Record mapping of cell type to Channel:
ct.v<-c(ct.v, unique.id[which(ri.index%in%RI_keep)] )
qt.v<-c(qt.v, colnames(ev)[RI_keep] )
colnames(ev.t.melt)<-c("Raw.file","sequence","protein","lcbatch","sortday","digest","celltype","quantitation")
ev.melt<-rbind(ev.melt, ev.t.melt)
# Update unique ID string
unique.id.numeric<-unique.id.numeric + length(ri.index)
unique.id<-paste0("i", unique.id.numeric)
}
View(ev)
ev<-read.delim('/Volumes/GoogleDrive/My Drive/MS/Collaborators/Senescence/evidence_SQC.txt')
parse_row<-grep("|",ev$Leading.razor.protein, fixed=T)
if(length(parse_row)>0){
split_prot<-str_split(ev$Leading.razor.protein[parse_row], pattern = fixed("|"))
split_prot2<-unlist(split_prot)[seq(2,3*length(split_prot),3)]
ev$Leading.razor.protein[parse_row]<-split_prot2
}
parse_row<-grep("-",ev$Leading.razor.protein, fixed=T)
if(length(parse_row)>0){
split_prot<-str_split(ev$Leading.razor.protein[parse_row], pattern = fixed("-"))
split_prot2<-unlist(split_prot)[seq(1,2*length(split_prot),2)]
ev$Leading.razor.protein[parse_row]<-split_prot2
}
# Load experimental design and batches
design<-read.csv("/Users/andrewleduc/Desktop/GitHub/senescence/annotation_18plex.csv")
batch<-read.csv("/Users/andrewleduc/Desktop/GitHub/senescence/batch.csv")
# Attach batch data to protein data
ev[,colnames(batch)[-1]]<-NA
for(X in batch$set){
ev$lcbatch[ev$Raw.file==X] <- as.character(batch$lcbatch[batch$set%in%X])
ev$sortday[ev$Raw.file==X] <- as.character(batch$sortday[batch$set%in%X])
ev$digest[ev$Raw.file==X] <- as.character(batch$digest[batch$set%in%X])
}
# Create unique peptide+charge column:
ev$modseq<-paste0(ev$Modified.sequence,ev$Charge)
# Add X in front of experiment names because R doesn't like column names starting with numbers
ev$Raw.file<-paste0("X",ev$Raw.file)
design$Set<-paste0("X",design$Set)
# Which columns hold the TMT Reporter ion (RI) data
ri.index<-which(colnames(ev)%in%paste0("Reporter.intensity.",1:10))
# Make sure all runs are described in design, if not, print and remove them:
not.described<-unique(ev$Raw.file)[ !unique(ev$Raw.file) %in% paste0(design$Set) ]
ev<-ev[!ev$Raw.file%in%not.described,]
# Filter out reverse hits, contaminants, and contaminated spectra...
ev<-ev[-which(ev$Reverse=="+"),]
if(length(grep("REV", ev$Leading.razor.protein))>0){ ev<-ev[-grep("REV", ev$Leading.razor.protein),] }
if(length(grep("CON", ev$Leading.razor.protein))>0){ ev<-ev[-grep("CON", ev$Leading.razor.protein),] }
if(length(which(ev$Potential.contaminant=="+"))>0){ ev<-ev[-which(ev$Potential.contaminant=="+"),] }
ev<-ev[!is.na(ev$PIF),]
ev<-ev[ev$PIF>0.8,]
ev<-ev[ev$PEP<0.03, ]
# Normalize single cell runs to normalization channel
ev<-as.data.frame(ev)
# Organize data into a more convenient data structure:
# Create empty data frame
ev.melt<-melt(ev[0, c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest", colnames(ev)[ri.index]) ],
id.vars = c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest"))
colnames(ev.melt)<-c("Raw.file","sequence","protein","lcbatch","sortday","digest","celltype","quantitation")
# Record mapping of cell type to Channel:
ct.v<-c()
qt.v<-c()
# Create a unique ID string
unique.id.numeric<-1:length(ri.index)
unique.id<-paste0("i",unique.id.numeric)
RI_keep<-ri.index
ev <- ev %>% filter(is.na(Raw.file)==F)
# Give each sample a unique identifier
for(X in unique(ev$Raw.file)){
# Subset data by X'th experiment
ev.t<-ev[ev$Raw.file%in%X, ]
# Name the RI columns by what sample type they are: carrier, single cell, unused, etc...
colnames(ev.t)[ri.index]<-paste0(as.character(unlist(design[design$Set==X,-1])),"-", unique.id)
# Melt it! and combine with other experimental sets
ev.t.melt<-melt(ev.t[, c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest", colnames(ev.t)[RI_keep]) ],
id.vars = c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest"));
# Record mapping of cell type to Channel:
ct.v<-c(ct.v, unique.id[which(ri.index%in%RI_keep)] )
qt.v<-c(qt.v, colnames(ev)[RI_keep] )
colnames(ev.t.melt)<-c("Raw.file","sequence","protein","lcbatch","sortday","digest","celltype","quantitation")
ev.melt<-rbind(ev.melt, ev.t.melt)
# Update unique ID string
unique.id.numeric<-unique.id.numeric + length(ri.index)
unique.id<-paste0("i", unique.id.numeric)
}
colnames(ev.t)
ri.index
colnames(ev.t)[ri.index]
c2q<-data.frame(ct.v, qt.v); colnames(c2q)<-c("id","channel")
c2q$id <- as.character(c2q$id )
# Grab the unique number associate to each and every cell, carrier channel, and empty channel
ev.melt$id<-unlist(strsplit(as.character(ev.melt$celltype),"-"))[seq(2,length(unlist(strsplit(as.character(ev.melt$celltype),"-"))),2)]
ev.melt$celltype<-unlist(strsplit(as.character(ev.melt$celltype),"-"))[seq(1,length(unlist(strsplit(as.character(ev.melt$celltype),"-"))),2)]
ev.melt$id<-as.factor(ev.melt$id)
# Remove duplicate observations of peptides from a single experiment
ev.melt<-remove.duplicates(ev.melt,c("sequence","id") )
ev.melt<-ev.melt[!is.na(ev.melt$protein), ]
# Create additional meta data matrices
ev.melt.uniqueID<-remove.duplicates(ev.melt,"id")
ev.melt.pep<-remove.duplicates(ev.melt, c("sequence","protein") )
# Create data frame of peptides x cells, populated by quantitation
ev.unmelt<-dcast(ev.melt, sequence ~ id, value.var = "quantitation", fill=NA)
# Also create matrix of same shape
ev.matrix<-as.matrix(ev.unmelt[,-1]); row.names(ev.matrix)<-ev.unmelt$sequence
# Replace all 0s with NA
ev.matrix[ev.matrix==0]<-NA
ev.matrix[ev.matrix==Inf]<-NA
ev.matrix[ev.matrix==-Inf]<-NA
# Divide matrix into single cells (including intentional blanks) and carriers
sc_cols<-unique(ev.melt$id[(ev.melt$celltype%in%c(your_labels))])
ev.matrix.sc<-ev.matrix[, colnames(ev.matrix)%in%sc_cols]
sc.melt<-ev.melt
xd<-as_tibble( sc.melt )
xd <- xd %>% dplyr::group_by(id) %>% dplyr::mutate(med_per_c = median(quantitation, na.rm=T)); length(unique(xd$id))
length(unique(xd$id))
xd$quantitation[(xd$quantitation)==Inf]<-NA
xd$quantitation[(xd$quantitation)==0]<-NA
xd <- xd %>% dplyr::mutate_if(is.factor, as.character)
xd1 <- xd %>%
dplyr::group_by(id) %>%
dplyr::mutate(norm_q1 = quantitation / median(quantitation, na.rm=T))
xd2 <- xd1 %>%
dplyr::group_by(sequence, Raw.file) %>%
dplyr::mutate(norm_q = quantitation / median(norm_q1, na.rm=T))
xd3<- xd2 %>%
dplyr::filter(celltype%in%c(your_labels))
xd4<- xd3 %>%
dplyr::group_by(protein, id) %>%
mutate(cvq = cv(norm_q))
xd5<- xd4 %>%
dplyr::group_by(protein, id) %>%
dplyr::mutate(cvn = cvna(norm_q))
xd6<- xd5 %>%
filter(cvn > 2)
xd7<-xd6 %>% group_by(id) %>% dplyr::mutate(cvm=median(cvq, na.rm=T))
xdf<-xd7
cvPar <- 0.46
sc_kept<-unique( xdf$id[xdf$celltype!=your_control_label & xdf$cvm < cvPar])
sc0_kept<-unique( xdf$id[xdf$celltype==your_control_label & xdf$cvm > cvPar])
# Which wells to keep
keep_these<-unique( xdf$id)
sc_total<-unique( xdf$id[xdf$celltype!=your_control_label])
sc0_total<-unique( xdf$id[xdf$celltype==your_control_label])
scrate<-round(length(sc_kept) / length(sc_total),2)*100
ev.matrix.sc.f<-ev.matrix.sc[,colnames(ev.matrix.sc)%in%sc_kept]; dim(ev.matrix.sc.f)
ev.matrix.sc.f[ev.matrix.sc.f==Inf]<-NA
ev.matrix.sc.f[ev.matrix.sc.f==-Inf]<-NA
ev.matrix.sc.f[ev.matrix.sc.f==0]<-NA
xdf$control<-"sc"
xdf$control[xdf$celltype==your_control_label]<-"ctl"
my_col3<-c( "black", "purple2")
ggplot(data=xdf, aes(x=cvm,fill=control)) + geom_density(aes( alpha=0.5), adjust=4) + theme_pubr() +
scale_fill_manual(values=my_col3[c(1,2)]) +
xlab("Quantification variability") + ylab("Fraction of cells") + rremove("y.ticks") + rremove("y.text") +
font("xylab", size=30) +
font("x.text", size=20) +
coord_cartesian(xlim=c(.0,1))+
#xlim(c(-0.15, 0.35)) +
# annotate("text", x=0.27, y= 14, label=paste0(scrate,"% single cells passed"), size=8, color=my_col3[c(2)])+
# annotate("text", x=0.27, y= 12.5, label=paste0(sc0rate,"% control wells passed"), size=8, color=my_col3[c(1)])+
annotate("text", x=0.26, y= 14, label=paste0(length(sc_kept),"cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.64, y= 12, label=paste0(length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
annotate("text", x=0.63, y= 14, label=paste0(length(sc_total) -length(sc_kept)," cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.245, y= 12, label=paste0(length(sc0_total) - length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
#annotate("text", x=0.25, y= 3, label="Macrophage-like", size=6) +
rremove("legend") + geom_vline(xintercept=0.4, lty=2, size=2, color="gray50") + theme(plot.margin = margin(0, 1, 0, 0, "cm"))
ggplot(data=xdf, aes(x=cvm,fill=control)) + geom_density(aes( alpha=0.5), adjust=4) + theme_pubr() +
scale_fill_manual(values=my_col3[c(1,2)]) +
xlab("Quantification variability") + ylab("Fraction of cells") + rremove("y.ticks") + rremove("y.text") +
font("xylab", size=30) +
font("x.text", size=20)
median(xdf$cvm)
t0<-ev.matrix.sc.f
hist(c(t0), breaks=b.t, xlim=xlim.t)
# Column then row normalize by median or mean (see source functions):
t1<-cr_norm(t0)
hist(c(t1), breaks=b.t, xlim=xlim.t)
# Filter for missing data:
t2<-filt.mat.rc(t1, na.row, na.col)
hist(c(t2), breaks=b.t, xlim=xlim.t)
# Log2 transform:
t3<-log2(t2)
t3[t3==Inf]<-NA
t3[t3==-Inf]<-NA
t3[t3==0]<-NA
hist(c(t3), breaks=b.t, xlim=xlim.t)
# # Collapse to protein level by median:
t3m<-data.frame(t3)
t3m$pep<-rownames(t3)
t3m$prot <- ev.melt.pep$protein[match(t3m$pep, ev.melt.pep$sequence)]
t3m<-melt(t3m, variable.names = c("pep", "prot"))
colnames(t3m) <-c("pep","prot","id","quantitation")
t3m2<- t3m %>% group_by(prot, id) %>% dplyr::summarize(qp = median(quantitation, na.rm=T))
t4m<-dcast(t3m2, prot ~ id, value.var = "qp", fill=NA)
t4<-as.matrix(t4m[,-1]); row.names(t4)<-t4m[,1]
hist(c(t4), breaks=b.t, xlim=xlim.t)
# Re-column and row normalize:
t4b<-cr_norm_log(t4)
dim(t4b)
View(t4b)
Melanoma_null_dist <- Distance_cor(as.matrix(t4b),10)
Melanoma_null_dist$Condition <- " All Proteins"
Melanoma_null_dist <- Melanoma_null_dist %>% dplyr::select(Condition,value)
hist(Melanoma_null_dist$value)
Melanoma_Complexes <- data.frame(Complex_name = character(), pVal = numeric(),dist = numeric(),number_prots = numeric(), stringsAsFactors = FALSE)
t4b <- as.data.frame(t4b)
count <- 0
for(i in 1:nrow(comps)){
#GO_term <- unique_GO_terms[i]
#GO_db_lim <- GO_db %>% dplyr::filter(GO_term_name == GO_term)
comp_list <- unlist(str_split(comps$subunits.UniProt.IDs.[i],';'))
GO_mat <- t4b %>% filter(rownames(t4b) %in% comp_list)
if (nrow(GO_mat) > 2){
GO_mat <- as.matrix(GO_mat)
GO_cor <- Distance_cor(GO_mat,5)
if(nrow(GO_cor) > 2){
count <- count+1
GO_cor$Condition <- 'comp'
GO_cor <- GO_cor %>% dplyr::select(Condition,value)
Null_plus_dat <- rbind(Melanoma_null_dist,GO_cor)
aov_out <- aov(value ~ Condition, data = Null_plus_dat)
aov_out<- summary(aov_out)
aov_out <- data.frame(aov_out[[1]])
Melanoma_Complexes[count,1] <- comps$ComplexName[i]
Melanoma_Complexes[count,2] <- aov_out[1,5]
Melanoma_Complexes[count,3] <- median(GO_cor$value)
Melanoma_Complexes[count,4] <- nrow(GO_mat)
}
}
}
Melanoma_Complexes$qVal <- p.adjust(Melanoma_Complexes$pVal, method = 'BH')
View(Melanoma_Complexes)
imp.input<-ev.matrix.sc.f.n
sc.imp <- hknn(imp.input, k.t)
t5<-sc.imp
sum(is.na(sc.imp))
dim(sc.imp)
sc.imp[(is.na(sc.imp))]<-0
# Batch correction with ComBat
batch.N<-table(ev.melt.uniqueID$Raw.file[ev.melt.uniqueID$id%in%colnames(sc.imp)])
sc.imp<-sc.imp[,!colnames(sc.imp)%in%ev.melt.uniqueID$id[ev.melt.uniqueID$Raw.file%in%names(batch.N)[batch.N==1]]]
# ### Uncomment if ComBat fails to execute because there are proteins that don't vary within one or more experiments
# # Remove proteins with no variance
# batch.covs <- ev.melt.uniqueID$Raw.file[match(colnames(sc.imp), ev.melt.uniqueID$id)]
# rr<-c()
# rawx<-c()
# for(Y in unique(batch.covs)){
#
#   xt<-sc.imp[,batch.covs%in%Y]
#
#   vt<-rowVars(xt)
#
#   rawx<-c(rawx, rep(Y, length(which(vt==0))))
#
#   rr<-c(rr, which(vt==0) )
#
# }
#
# sc.imp<-sc.imp[-rr,]; dim(sc.imp)
# ### ^^ Uncomment if ComBat fails to execute because there are proteins that don't vary within one or more experiments
# Define the batches and model:
batch.covs <- ev.melt.uniqueID$Raw.file[match(colnames(sc.imp), ev.melt.uniqueID$id)]
mod<-data.frame(ev.melt.uniqueID$celltype[match(colnames(sc.imp), ev.melt.uniqueID$id)]); colnames(mod)<-"celltype"
#mod<-model.matrix(~as.factor(celltype), data=mod)
matrix.sc.batch <- ComBat(sc.imp, batch=batch.covs)
t6<-matrix.sc.batch
# visual sanity checks post-imputation:
hist(c(t5), breaks=b.t, xlim=xlim.t)
hist(c(t6), breaks=b.t, xlim=xlim.t)
par(mfrow=c(1,1))
t7 <- t6
t7[is.na(t4b)==T] <- NA
# Assign to a final variable name:
ev.matrix.sc.f.n<-t4b
# Re-column and row normalize:
t4b<-cr_norm_log(t4)
# Assign to a final variable name:
ev.matrix.sc.f.n<-t4b
imp.input<-ev.matrix.sc.f.n
sc.imp <- hknn(imp.input, k.t)
t5<-sc.imp
sum(is.na(sc.imp))
dim(sc.imp)
sc.imp[(is.na(sc.imp))]<-0
# Batch correction with ComBat
batch.N<-table(ev.melt.uniqueID$Raw.file[ev.melt.uniqueID$id%in%colnames(sc.imp)])
sc.imp<-sc.imp[,!colnames(sc.imp)%in%ev.melt.uniqueID$id[ev.melt.uniqueID$Raw.file%in%names(batch.N)[batch.N==1]]]
# ### Uncomment if ComBat fails to execute because there are proteins that don't vary within one or more experiments
# # Remove proteins with no variance
# batch.covs <- ev.melt.uniqueID$Raw.file[match(colnames(sc.imp), ev.melt.uniqueID$id)]
# rr<-c()
# rawx<-c()
# for(Y in unique(batch.covs)){
#
#   xt<-sc.imp[,batch.covs%in%Y]
#
#   vt<-rowVars(xt)
#
#   rawx<-c(rawx, rep(Y, length(which(vt==0))))
#
#   rr<-c(rr, which(vt==0) )
#
# }
#
# sc.imp<-sc.imp[-rr,]; dim(sc.imp)
# ### ^^ Uncomment if ComBat fails to execute because there are proteins that don't vary within one or more experiments
# Define the batches and model:
batch.covs <- ev.melt.uniqueID$Raw.file[match(colnames(sc.imp), ev.melt.uniqueID$id)]
mod<-data.frame(ev.melt.uniqueID$celltype[match(colnames(sc.imp), ev.melt.uniqueID$id)]); colnames(mod)<-"celltype"
#mod<-model.matrix(~as.factor(celltype), data=mod)
matrix.sc.batch <- ComBat(sc.imp, batch=batch.covs)
t6<-matrix.sc.batch
# visual sanity checks post-imputation:
hist(c(t5), breaks=b.t, xlim=xlim.t)
hist(c(t6), breaks=b.t, xlim=xlim.t)
par(mfrow=c(1,1))
t7 <- t6
t7[is.na(t4b)==T] <- NA
Melanoma_null_dist <- Distance_cor(as.matrix(t7),10)
Melanoma_null_dist$Condition <- " All Proteins"
Melanoma_null_dist <- Melanoma_null_dist %>% dplyr::select(Condition,value)
hist(Melanoma_null_dist$value)
Melanoma_Complexes <- data.frame(Complex_name = character(), pVal = numeric(),dist = numeric(),number_prots = numeric(), stringsAsFactors = FALSE)
t7 <- as.data.frame(t7)
count <- 0
for(i in 1:nrow(comps)){
#GO_term <- unique_GO_terms[i]
#GO_db_lim <- GO_db %>% dplyr::filter(GO_term_name == GO_term)
comp_list <- unlist(str_split(comps$subunits.UniProt.IDs.[i],';'))
GO_mat <- t7 %>% filter(rownames(t7) %in% comp_list)
if (nrow(GO_mat) > 2){
GO_mat <- as.matrix(GO_mat)
GO_cor <- Distance_cor(GO_mat,5)
if(nrow(GO_cor) > 2){
count <- count+1
GO_cor$Condition <- 'comp'
GO_cor <- GO_cor %>% dplyr::select(Condition,value)
Null_plus_dat <- rbind(Melanoma_null_dist,GO_cor)
aov_out <- aov(value ~ Condition, data = Null_plus_dat)
aov_out<- summary(aov_out)
aov_out <- data.frame(aov_out[[1]])
Melanoma_Complexes[count,1] <- comps$ComplexName[i]
Melanoma_Complexes[count,2] <- aov_out[1,5]
Melanoma_Complexes[count,3] <- median(GO_cor$value)
Melanoma_Complexes[count,4] <- nrow(GO_mat)
}
}
}
Melanoma_Complexes$qVal <- p.adjust(Melanoma_Complexes$pVal, method = 'BH')
Melanoma_Complexes <- Melanoma_Complexes %>% filter(qVal < .1)
View(Melanoma_Complexes)
t3m<-data.frame(t3)
t3m$pep<-rownames(t3)
t3m$prot <- pep_to_prot$prot[match(t3m$pep, pep_to_prot$pep)]
t3m$prot <- ev.melt.pep$protein[match(t3m$pep, ev.melt.pep$sequence)]
cors <- c()
count <- 0
#variable for proteins who have sufficiently  correlated peptides
good_prot <- c()
store <- c()
cors <- c()
count <- 0
#variable for proteins who have sufficiently  correlated peptides
good_prot <- c()
store <- c()
for (i in 1:length(unique(t3m$prot))){
prots <- t3m %>% filter(prot == unique(t3m$prot)[i])
if (nrow(prots)>1){
count <- count+1
prots$pep <- NULL
prots$prot <- NULL
cor_mat <- rcorr(t(prots), test = c('spearman'))$r
cor_mat <- cor_mat[lower.tri(cor_mat)]
if (is.na(median(cor_mat,na.rm = T)) ==F){
if((median(cor_mat,na.rm = T) > .1) == T){
good_prot <- c(good_prot,unique(t3m$prot)[i])
}
}
cors <- c(cors,cor_mat)
}
}
rcorr(t(prots), test = 'spearman')$r
cors <- c()
count <- 0
#variable for proteins who have sufficiently  correlated peptides
good_prot <- c()
store <- c()
for (i in 1:length(unique(t3m$prot))){
prots <- t3m %>% filter(prot == unique(t3m$prot)[i])
if (nrow(prots)>1){
count <- count+1
prots$pep <- NULL
prots$prot <- NULL
cor_mat <- rcorr(t(prots), type = 'spearman')$r
cor_mat <- cor_mat[lower.tri(cor_mat)]
if (is.na(median(cor_mat,na.rm = T)) ==F){
if((median(cor_mat,na.rm = T) > .1) == T){
good_prot <- c(good_prot,unique(t3m$prot)[i])
}
}
cors <- c(cors,cor_mat)
}
}
hist(cors,30)
shiny::runApp('~/Downloads/DO-MS-master')
comp_list_ <- as.data.frame(comps) %>% filter(ComplexName == '40S ribosomal subunit, cytoplasmic')
#GO_term <- unique_GO_terms[i]
#GO_db_lim <- GO_db %>% dplyr::filter(GO_term_name == GO_term)
comp_list <- unlist(str_split(comp_list_$subunits.UniProt.IDs.,';'))
GO_mat <- t7 %>% filter(rownames(t7) %in% comp_list)
GO_mat <- as.matrix(GO_mat)
GO_cor <- Distance_cor(GO_mat,5)
count <- count+1
GO_cor$Condition <- 'comp'
GO_cor <- GO_cor %>% dplyr::select(Condition,value)
Null_plus_dat <- rbind(Melanoma_null_dist,GO_cor)
ggplot(Null_plus_dat,aes(y = value,x = Condition)) + geom_boxplot() + ylab('Correlations')+theme_bw()
ggplot(data=xdf, aes(x=cvm,fill=control)) + geom_density(aes( alpha=0.5), adjust=4) + theme_pubr() +
scale_fill_manual(values=my_col3[c(1,2)]) +
xlab("Quantification variability") + ylab("Fraction of cells") + rremove("y.ticks") + rremove("y.text") +
font("xylab", size=30) +
font("x.text", size=20) +
coord_cartesian(xlim=c(.0,1))+
#xlim(c(-0.15, 0.35)) +
# annotate("text", x=0.27, y= 14, label=paste0(scrate,"% single cells passed"), size=8, color=my_col3[c(2)])+
# annotate("text", x=0.27, y= 12.5, label=paste0(sc0rate,"% control wells passed"), size=8, color=my_col3[c(1)])+
annotate("text", x=0.26, y= 14, label=paste0(length(sc_kept),"cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.64, y= 12, label=paste0(length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
annotate("text", x=0.63, y= 14, label=paste0(length(sc_total) -length(sc_kept)," cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.245, y= 12, label=paste0(length(sc0_total) - length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
#annotate("text", x=0.25, y= 3, label="Macrophage-like", size=6) +
rremove("legend") + geom_vline(xintercept=0.4, lty=2, size=2, color="gray50") + theme(plot.margin = margin(0, 1, 0, 0, "cm"))
